spring:
  datasource:
    url: ${DATABASE_URL:jdbc:h2:mem:testdb}
    username: ${DATABASE_USERNAME:sa}
    password: ${DATABASE_PASSWORD:}
    driver-class-name: ${DATABASE_DRIVER:org.h2.Driver}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.H2Dialect}
        format_sql: true
        jdbc:
          time_zone: UTC
          batch_size: 1000
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        batch_fetch_style: DYNAMIC
        connection:
          characterEncoding: UTF-8
    show-sql: false
    open-in-view: false
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
      file-size-threshold: 2KB
      location: ${java.io.tmpdir}
  h2:
    console:
      enabled: true
      path: /h2-console

app:
  file:
    storage:
      windows: ${STORAGE_PATH_WINDOWS:C:/var/log/applications/API/dataprocessing}
      linux: ${STORAGE_PATH_LINUX:/var/log/applications/API/dataprocessing}
      excel: excel
      csv: csv

server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /api
  tomcat:
    max-http-form-post-size: 100MB
    max-swallow-size: 100MB

logging:
  level:
    com.example: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Additional configurations for large file handling
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# JVM tuning for large file uploads
